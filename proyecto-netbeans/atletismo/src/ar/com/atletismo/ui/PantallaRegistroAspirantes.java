package ar.com.atletismo.ui;

import ar.com.atletismo.controller.GestorInscripcionesAspirantes;
import ar.com.atletismo.dominio.Aspirante;
import ar.com.atletismo.dominio.Categoria;
import ar.com.atletismo.dominio.Competencia;
import ar.com.atletismo.dominio.Escuela;
import ar.com.atletismo.utils.DateUtils;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author ariel
 */
public class PantallaRegistroAspirantes extends javax.swing.JFrame {

    // atributos
    private GestorInscripcionesAspirantes gestorInscripcionAspirantes;
    private List<Escuela> escuelas;
    private Escuela escuelaSeleccionada;
    private Aspirante aspiranteSeleccionado;
    private List<Competencia> competencias;
    private List<Competencia> competenciasDefault; // para que no vaya tantas veces a la bd a buscarlas
    
    // constructor
    public PantallaRegistroAspirantes(GestorInscripcionesAspirantes gestorInscripcionAspirantes) {
        this.gestorInscripcionAspirantes = gestorInscripcionAspirantes;
        this.competencias = new ArrayList<>();
        this.competenciasDefault = this.gestorInscripcionAspirantes.buscarCompetencias(DateUtils.getDatePreInscripcion());
        this.initComponents();
        this.llenarEscuelas();
        this.styleColumnModel();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEscuelas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listEscuelas = new javax.swing.JList<>();
        panelAspirantes = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAspirantes = new javax.swing.JList<>();
        btnNuevoAspirante = new javax.swing.JButton();
        panelCompetencias = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblCompetencias = new javax.swing.JTable();
        panelBotones = new javax.swing.JPanel();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        panelCategorias = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listCategorias = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panelEscuelas.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione escuela"));
        panelEscuelas.setName("panelEscuelas"); // NOI18N

        listEscuelas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listEscuelas.setName("listEscuelas"); // NOI18N
        listEscuelas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listEscuelasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listEscuelas);

        javax.swing.GroupLayout panelEscuelasLayout = new javax.swing.GroupLayout(panelEscuelas);
        panelEscuelas.setLayout(panelEscuelasLayout);
        panelEscuelasLayout.setHorizontalGroup(
            panelEscuelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        panelEscuelasLayout.setVerticalGroup(
            panelEscuelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEscuelasLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        panelAspirantes.setBorder(javax.swing.BorderFactory.createTitledBorder("Aspirantes"));
        panelAspirantes.setEnabled(false);
        panelAspirantes.setName("panelAspirantes"); // NOI18N
        panelAspirantes.setPreferredSize(new java.awt.Dimension(395, 325));

        listAspirantes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listAspirantes.setEnabled(false);
        listAspirantes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listAspirantesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listAspirantes);

        btnNuevoAspirante.setText("Nuevo Aspirante");
        btnNuevoAspirante.setEnabled(false);
        btnNuevoAspirante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoAspiranteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAspirantesLayout = new javax.swing.GroupLayout(panelAspirantes);
        panelAspirantes.setLayout(panelAspirantesLayout);
        panelAspirantesLayout.setHorizontalGroup(
            panelAspirantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAspirantesLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnNuevoAspirante, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelAspirantesLayout.setVerticalGroup(
            panelAspirantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAspirantesLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNuevoAspirante, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelCompetencias.setBorder(javax.swing.BorderFactory.createTitledBorder("Competencias"));
        panelCompetencias.setEnabled(false);
        panelCompetencias.setName("panelCompetencias"); // NOI18N
        panelCompetencias.setPreferredSize(new java.awt.Dimension(375, 127));

        tblCompetencias.setModel(new CompetenciaTableModel(this.competencias)
        );
        tblCompetencias.setEnabled(false);
        tblCompetencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCompetenciasMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblCompetencias);

        javax.swing.GroupLayout panelCompetenciasLayout = new javax.swing.GroupLayout(panelCompetencias);
        panelCompetencias.setLayout(panelCompetenciasLayout);
        panelCompetenciasLayout.setHorizontalGroup(
            panelCompetenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        panelCompetenciasLayout.setVerticalGroup(
            panelCompetenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCompetenciasLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addGap(356, 356, 356)
                .addComponent(btnAceptar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        panelCategorias.setBorder(javax.swing.BorderFactory.createTitledBorder("Categor√≠as"));
        panelCategorias.setEnabled(false);
        panelCategorias.setPreferredSize(new java.awt.Dimension(375, 153));

        listCategorias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listCategorias.setEnabled(false);
        listCategorias.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCategoriasValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listCategorias);

        javax.swing.GroupLayout panelCategoriasLayout = new javax.swing.GroupLayout(panelCategorias);
        panelCategorias.setLayout(panelCategoriasLayout);
        panelCategoriasLayout.setHorizontalGroup(
            panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
        );
        panelCategoriasLayout.setVerticalGroup(
            panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelEscuelas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(panelAspirantes, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelCompetencias, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                            .addComponent(panelCategorias, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelEscuelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelAspirantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelCompetencias, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        // metodos
    private void llenarEscuelas() {
        this.escuelas = this.gestorInscripcionAspirantes.buscarEscuelas();
        DefaultListModel<String> dlm = new DefaultListModel<>();
        this.escuelas.stream().forEach(e -> dlm.addElement(e.getNombre()));
        this.listEscuelas.setModel(dlm);
    }

    /*
     * el netbeans me agrego el ListSelectionListener al JList y el valueChanged llama a este metodo.
     */
    private void listEscuelasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listEscuelasValueChanged
        if (!evt.getValueIsAdjusting()) { // evita que ejecute 2 veces
            int indiceEscuelaSeleccionada = this.listEscuelas.getSelectedIndex();
            this.escuelaSeleccionada = this.escuelas.get(indiceEscuelaSeleccionada);
            this.activarAspirantes();
            this.llenarAspirantes();
        }
    }//GEN-LAST:event_listEscuelasValueChanged

    private void activarAspirantes() {
        this.panelAspirantes.setEnabled(true);
        this.listAspirantes.setEnabled(true);
        this.btnNuevoAspirante.setEnabled(true);
    }
    
    private void btnNuevoAspiranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoAspiranteActionPerformed
        PantallaNuevoAspirante nuevoAspiranteDialog = new PantallaNuevoAspirante(this, true);
        nuevoAspiranteDialog.setVisible(true);
        Aspirante nuevoAspirante = nuevoAspiranteDialog.getAspirante();
        if (nuevoAspirante!=null) {
            nuevoAspirante.setEscuela(this.escuelaSeleccionada);
            nuevoAspirante.setCompetenciasAuxiliares(this.duplicar(this.competenciasDefault));
            nuevoAspirante.getCompetenciasAuxiliares().stream().forEach( c -> c.setSeleccionada(false));
            this.escuelaSeleccionada.agregarAspiranteARegistrar(nuevoAspirante);
            this.llenarAspirantes();
        }
    }//GEN-LAST:event_btnNuevoAspiranteActionPerformed

    public Escuela existeAspiranteEnFrame(Integer dniNuevoAspirante) {
        for (Escuela escuela : this.escuelas) {
            if (escuela.tieneAspirantesARegistrar() && escuela.tieneAspiranteARegistrar(dniNuevoAspirante)) {
                return escuela;
            }
        }
        return null;
    }
    
    /*
     * el netbeans me agrego el ListSelectionListener al JList y el valueChanged llama a este metodo.
     */
    private void listAspirantesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listAspirantesValueChanged
        if (!evt.getValueIsAdjusting()) { // evita que ejecute 2 veces
            int indiceAspiranteSeleccionado = this.listAspirantes.getSelectedIndex();
            if (indiceAspiranteSeleccionado>=0) {
                this.aspiranteSeleccionado = this.escuelaSeleccionada.getAspirantesARegistrar().get(indiceAspiranteSeleccionado);
                this.tblCompetencias.setModel(new CompetenciaTableModel(this.aspiranteSeleccionado.getCompetenciasAuxiliares()));
                this.styleColumnModel();
                this.activarCompetencias();
                this.limpiarYDesactivarCategorias();
            } else {
                this.limpiarYDesactivarCompetencias();
            }
        }
    }//GEN-LAST:event_listAspirantesValueChanged

    private void styleColumnModel() {
        this.tblCompetencias.getColumnModel().getColumn(0).setPreferredWidth(10);
        this.tblCompetencias.getColumnModel().getColumn(1).setPreferredWidth(160);
        DefaultTableCellRenderer cellFechaRenderer = new DefaultTableCellRenderer();
        cellFechaRenderer.setHorizontalAlignment(JLabel.CENTER);
        this.tblCompetencias.getColumnModel().getColumn(2).setCellRenderer(cellFechaRenderer);
        DefaultTableCellRenderer cellHoraRenderer = new DefaultTableCellRenderer();
        cellHoraRenderer.setHorizontalAlignment(JLabel.CENTER);
        this.tblCompetencias.getColumnModel().getColumn(3).setCellRenderer(cellHoraRenderer);
    }
    
    private void limpiarYDesactivarCompetencias() {
        this.limpiarCompetencias();
        this.desactivarCompetencias();
    }
    
    private void tblCompetenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCompetenciasMouseClicked
        int filaSeleccionada = this.tblCompetencias.getSelectedRow();
        this.panelCategorias.setEnabled(true);
        // cambio estado check
        if (this.tblCompetencias.getSelectedColumn()==0) {
            this.tblCompetencias.getModel().setValueAt("Lamadrid", filaSeleccionada, 0);
        }
        // lleno vategorias de la competencia
        DefaultListModel<String> dlm = new DefaultListModel<>();
        this.aspiranteSeleccionado.getCompetenciasAuxiliares().get(filaSeleccionada).getCategorias().stream().forEach(cat -> dlm.addElement(cat.getDescripcion()));
        this.listCategorias.setModel(dlm);
        // si el check esta tildado permito seleccionar categoria, preseleccionando en caso de haber seleccionada
        if ((Boolean)this.tblCompetencias.getModel().getValueAt(filaSeleccionada, 0)) {
            this.listCategorias.setEnabled(true);
            if (this.aspiranteSeleccionado.getCompetenciasAuxiliares().get(filaSeleccionada).getCategoriaSeleccionada()!=null) {
                // existe categoria seleccionada
                for (int i = 0; i < this.listCategorias.getModel().getSize(); i++) {
                    if (this.listCategorias.getModel().getElementAt(i).equals(this.aspiranteSeleccionado.getCompetenciasAuxiliares().get(filaSeleccionada).getCategoriaSeleccionada().getDescripcion())) {
                        this.listCategorias.setSelectedIndex(i);
                    }
                }
            } else {
                Competencia competencia = this.aspiranteSeleccionado.getCompetenciasAuxiliares().get(filaSeleccionada);
                Categoria categoriaDefault = competencia.getCategoriaPorDefecto(this.aspiranteSeleccionado);
                if (categoriaDefault!=null) {
                    for (int i = 0; i < this.listCategorias.getModel().getSize(); i++) {
                        if (this.listCategorias.getModel().getElementAt(i).equals(categoriaDefault.getDescripcion())) {
                            this.listCategorias.setSelectedIndex(i);
                        }
                    }
                }
            }
        } else {
            // sino esta tildado limpio la seleccion y deshabilito el listCategorias
            this.listCategorias.clearSelection();
            this.listCategorias.setEnabled(false);
        }
    }//GEN-LAST:event_tblCompetenciasMouseClicked

    private void listCategoriasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCategoriasValueChanged
        if (!evt.getValueIsAdjusting()) { // evita que ejecute 2 veces
            if (this.listCategorias.getSelectedIndex()>=0) {
                String catSel = this.listCategorias.getModel().getElementAt(this.listCategorias.getSelectedIndex());
                Categoria categoriaSeleccionada = this.aspiranteSeleccionado.getCompetenciasAuxiliares().get(this.tblCompetencias.getSelectedRow()).getCategorias()
                                                            .stream()
                                                            .filter( c -> c.getDescripcion().equals(catSel))
                                                            .findFirst()
                                                            .orElse(null);
                this.aspiranteSeleccionado.getCompetenciasAuxiliares().get(this.tblCompetencias.getSelectedRow()).setCategoriaSeleccionada(categoriaSeleccionada);
            }
        }
    }//GEN-LAST:event_listCategoriasValueChanged

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        String mensajeError = null;
        for (Escuela escuela : this.escuelas) {
            mensajeError = escuela.validarInscripcionDeAspirantes();
            if (!StringUtils.isBlank(mensajeError)) {
                break;
            }
        }
        if (!StringUtils.isBlank(mensajeError)) {
            JOptionPane.showMessageDialog(this, "Hay aspirantes sin categoria seleccionada: " + mensajeError, "ASPIRANTE SIN CATEGORIA", JOptionPane.ERROR_MESSAGE);
        } else {
            this.gestorInscripcionAspirantes.registrarAspirantes(this.escuelas);
            JOptionPane.showMessageDialog(this, "Los aspirnates han sido registrados satisfactoriamente", "Operaci√≥n aceptada", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        }        
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void activarCompetencias() {
        this.panelCompetencias.setEnabled(true);
        this.tblCompetencias.setEnabled(true);
    }

    private void desactivarCompetencias() {
        this.tblCompetencias.setEnabled(false);
        this.panelCompetencias.setEnabled(false);
        this.desactivarCategorias();
    }

    private void limpiarCompetencias() {
        this.tblCompetencias.setModel(new CompetenciaTableModel());
        this.limpiarCategorias();
    }

    private void llenarAspirantes() {
        DefaultListModel<String> dlm = new DefaultListModel<>();
        if (this.escuelaSeleccionada.getAspirantesARegistrar()!=null) {
            this.escuelaSeleccionada.getAspirantesARegistrar().stream().forEach(a -> dlm.addElement(a.toString()));   
        }
        this.listAspirantes.setModel(dlm); 
    }
    
    private void limpiarYDesactivarCategorias() {
        this.limpiarCategorias();
        this.desactivarCategorias();
    }
    
    private void limpiarCategorias() {
        this.listCategorias.clearSelection();
        DefaultListModel<String> dlm = new DefaultListModel<>();
        this.listCategorias.setModel(dlm);
    }
    
    private void desactivarCategorias() {
        this.listCategorias.setEnabled(false);
        this.panelCategorias.setEnabled(false);
    }
    
    private List<Competencia> duplicar(List<Competencia> competencias) {
        List<Competencia> newCompetencias = null;
        if (competencias!=null) {
            newCompetencias = new ArrayList<Competencia>();
            for (Competencia competencia : competencias) {
                Competencia competenciaNew = new Competencia(competencia);
                newCompetencias.add(competenciaNew);
            }
        }
        return newCompetencias;
    }

    public GestorInscripcionesAspirantes getGestorInscripcionAspirantes() {
        return gestorInscripcionAspirantes;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnNuevoAspirante;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> listAspirantes;
    private javax.swing.JList<String> listCategorias;
    private javax.swing.JList<String> listEscuelas;
    private javax.swing.JPanel panelAspirantes;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelCategorias;
    private javax.swing.JPanel panelCompetencias;
    private javax.swing.JPanel panelEscuelas;
    private javax.swing.JTable tblCompetencias;
    // End of variables declaration//GEN-END:variables
}
